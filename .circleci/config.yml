version: 2.1

parameters:
  workflow_id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack \
            --stack-name udapeople-backend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack \
            --stack-name udapeople-frontend-<<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS = $(curl --insecure https://kvdb.io/Cn38wMVvuo7cQwF4Mp1unv/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             npm run build
             npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-frontend]
      - run:
          name: Test-frontend test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend]
      - run:
          name: Test-backend test
          command: |
            cd backend
            npm install 
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Scan-Frontend scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Scan-backend scan
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #     # Docker image here that supports AWS CLI
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run: yum install tar gzip -y
  #     - run:
  #         name: Ensure back-end infrastructure exists
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/backend.yml \
  #             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #             --tags project=udapeople-backend

  #     - run:
  #         name: Ensure front-end infrastructure exist
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/frontend.yml \
  #             --tags project=udapeople \
  #             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
  #     - run:
  #         name: Add back-end ip to ansible inventory
  #         command: |
  #           aws ec2 describe-instances \
  #           --query "Reservations[*].Instances[*].[PublicIpAddress]" \
  #           --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --output text >> ~/project/.circleci/ansible/inventory.txt
  #           cat ~/project/.circleci/ansible/inventory.txt

  #     - run: yum -y install tar gzip

  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/.circleci/ansible/inventory.txt
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.10-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["a5:8c:b2:00:fb:75:d2:7d:0e:aa:4c:c0:cb:74:5c:0d"]

  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache ansible tar gzip aws-cli openssh

  #     - run:
  #         name: Configure server
  #         command: |
  #           pwd
  #           cd .circleci/ansible
  #           ls -al
  #           ansible-playbook -i inventory.txt configure-server.yml
  #         no_output_timeout: 25m

  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # run-migrations:
  #   docker:
  #     - image: cimg/node:18.4.0
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - restore_cache:
  #         keys: [backend]
  #     - run:
  #         name: Run migrations
  #         command: |
  #           cd backend
  #           # npm install            
  #           # Run and save the migration output
  #           npm run migrations > ~/project/migrations_dump.txt
  #           cat ~/project/migrations_dump.txt
  #     - run:
  #         name: Send migration results to memstash
  #         command: |
  #           if grep -q "has been executed successfully." ~/project/migrations_dump.txt
  #           then
  #             curl " https://kvdb.io/Cn38wMVvuo7cQwF4Mp1unv/migration_${CIRCLE_WORKFLOW_ID:0:7}" -s -d '1'
  #           fi
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/migrations_dump.txt
  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-frontend:
  #   docker:
  #     - image: python:3.10-alpine3.16
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache tar
  #           apk add --update --no-cache gzip
  #           apk add --update --no-cache nodejs
  #           apk add --update --no-cache npm
  #           apk add --update --no-cache aws-cli
  #           apk add --update --no-cache curl

  #     - run:
  #         name: Get backend url
  #         command: |
  #           export BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters Name=tag:Name, Values=backend-{CIRCLE_WORKFLOW_ID:0:7} \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "API_URL = ${API_URL}"
  #           echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
  #           cat frontend/.env

  #     - run:
  #         name: Deploy frontend objects
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #           tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
  #           aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-backend:
  #   docker:
  #     - image: python:3.10-alpine3.16
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["a5:8c:b2:00:fb:75:d2:7d:0e:aa:4c:c0:cb:74:5c:0d"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update --no-cache ansible tar gzip nodejs npm curl aws-cli

  #     - run:
  #         name: Deploy backend
  #         command: |
  #           pwd
  #           cd backend
  #           touch .env
  #           echo ENVIRONMENT=production > ".env"
  #           echo TYPEORM_CONNECTION=postgres >> ".env"
  #           echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> ".env"
  #           echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> ".env"
  #           echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> ".env"
  #           echo NODE_ENV=production >> ".env"
  #           echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
  #           echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
  #           echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
  #           echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
  #           echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"

  #           pwd
  #           ls -al
  #           npm install
  #           npm run build
  #           cd ..
  #           pwd
  #           ls -al
  #           tar -C backend -czvf artifact.tar.gz .
  #           cd .circleci/ansible
  #           echo "Contents  of the inventory.txt file is -------"
  #           cat inventory.txt
  #           ansible-playbook -i inventory.txt deploy-backend.yml

  #     - destroy-environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #     - revert-migrations:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # # smoke-test:
  # #   docker:
  # #     # Lightweight Docker image
  # #     - image: python:3.10-alpine3.16
  # #   steps:
  # #     # Checkout code from git
  # #     - checkout
  # #     - attach_workspace:
  # #         at: ~/
  # #     - run:
  # #         name: Install dependencies
  # #         command: |
  # #           apk add --update --no-cache tar gzip nodejs npm curl aws-cli
  # #     - run:
  # #         name: Get backend url and Backend smoke test.
  # #         working_directory: ./backend
  # #         command: |
  # #           export BACKEND_IP=$(aws ec2 describe-instances \
  # #               --query "Reservations[*].Instances[*].[PublicIpAddress]" \
  # #               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  # #               --output text)

  # #           export API_URL="http://${BACKEND_IP}:3030"
  # #           echo "API_URL = ${API_URL}"
  # #           if curl "${API_URL}/api/status" | grep "ok"
  # #           then
  # #               return 0
  # #           else
  # #               return 1
  # #           fi

  # #     - run:
  # #         name: Frontend smoke test.
  # #         command: |
  # #           URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
  # #           echo ${URL}

  # #           if curl -s ${URL} | grep "Welcome"
  # #           then
  # #             # Change this to 0 after the job fails
  # #             return 1
  # #           else
  # #             return 1
  # #           fi

  # # Here's where you will add some code to rollback on failure
  # # - destroy-environment:
  # #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  # # - revert-migrations:
  # #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # cloudfront-update:
  #   docker:
  #     # Docker image here that supports AWS CLI
  #     - image: amazon/aws-cli
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install tar gzip -y
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation \
  #             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
  #             --no-paginate --output text | grep -o '[^-]*$' )
  #           echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
  #           cat ~/project/OldWorkflowID.txt
  #     - persist_to_workspace:
  #         root: ~/
  #         paths:
  #           - project/OldWorkflowID.txt
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name InitialStack \
  #             --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --tags project=udapeople
  #           echo OldWorkflowID: cat ~/project/OldWorkflowID.txt
  #           echo CurrentWorflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
 
  # cleanup:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           yum install tar gzip -y
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Get old stack workflow id
  #         command: |
  #           export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
  #             --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
  #           echo Stack names: "${STACKS[@]}"
  #           cat ~/project/OldWorkflowID.txt
  #           export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
  #           echo OldWorkflowID: "${OldWorkflowID}"
  #     - run:
  #         name: Remove old stacks and files
  #         command: |
  #           export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
  #           if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
  #           then
  #             echo "Deleting old stack"
  #             echo "s3://udapeople-${OldWorkflowID}"
  #             aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive || true
  #             aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}" || true
  #             aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}" || true
  #           else
  #             echo "Stack is the latest"
  #           fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires:
      #       - scan-frontend
      #       - scan-backend
      #     filters:
      #       branches:
      #         only:
      #           - master
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # # - smoke-test:
      # #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [deploy-frontend]
      # - cleanup:
      #     requires: [cloudfront-update]
